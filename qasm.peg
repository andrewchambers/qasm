%{
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

static void qbe(char *s, size_t len);

%}

prog = asmline | qbe

line = (!"\n" .)*  "\n"

asmline = < !qbestart line > { printf("%s", yytext); }

qbe = qbestart < qbeline+ > (qbeend | !.) { qbe(yytext, yyleng); }

qbestart = ws ".qbe" ws  "\n"

qbeend = ws ".asm" ws "\n"

qbeline = (! qbeend) line

ws = (" " | "\t")*

%%

static void
qbe(char *s, size_t len)
{
	pid_t pid;

	pid = fork();
	if (pid < 0) {
		perror("fork:");
		exit(1);
	} else if (pid > 0) {
		int wstatus;
		if (waitpid(pid, &wstatus, 0) < 0) {
			perror("waitpid:");
			exit(1);
		}
		if (!WIFEXITED(wstatus) || WEXITSTATUS(wstatus)) {
			fprintf(stderr, "qbe error\n");
			exit(1);
		}
	} else {

		FILE *f = tmpfile();
		if (!f) {
			perror("temp file:");
			exit(1);
		}

		if (fwrite(s, 1, len, f) != len) {
			perror("fwrite:");
			exit(1);
		}

		if (fseek(f, 0, SEEK_SET) < 0) {
			perror("fseek:");
			exit(1);
		}

		if (dup2(fileno(f), STDIN_FILENO) < 0) {
			perror("dup2:");
			exit(1);
		}

		if (fclose(f) != 0) {
			perror("fclose:");
			exit(1);
		}

		execlp("/bin/sh", "/bin/sh", "-c", "qbe | grep -v -e '^\\.' -e '^/' ", NULL);
		perror("exec qbe:");
		exit(1);
	}
}

int main()
{
	while (yyparse() && !feof(stdout))
		;

	return 0;
}
